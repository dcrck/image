# Region detection for mammogram images

## Section

```elixir
Mix.install([:image, :kino])
```

## Select the image

```elixir
image_input = Kino.Input.image("Image to segment")
```

## Find image regions

```elixir
# Threshold beyond which the pixel is
# included in the mask. For a monochromatic
# mammogram, anything not black (0) is part
# of the mask.
threshold = 0

# See Image.blur/2. Blurring the image
# before masking will cater for image noise.
blur_sigma = 1.5
min_amplitude = 0.01

image = 
  image_input
  |> Kino.Input.read()
  |> Image.from_kino!() 

# For monochrome mammograms we may not 
# get much benefit from lab space, but
# working with just the luminance band
# reflects the monochrome nature of then
# image. We might use other strategies to
# create a mask with color data.
lab_image =
  image
  |> Image.flatten!() 
  |> Image.to_colorspace!(:lab)

# Mask just using the luminance band. Since
# we are using a luminance mask we jus start
# with the "L" band of the image. Thresholding
# with a value > 0 means we're using non-black
# pixels as the mask.
mask = 
  lab_image[0]
  |> Image.blur!(sigma: blur_sigma, min_amplitude: min_amplitude)
  |> Image.Math.greater_than!(threshold)

{labels, _regions} = Vix.Vips.Operation.labelregions!(mask)

# Operation.xyz/2 creates an image where each pixel
# values are coordinates.
xy = Vix.Vips.Operation.xyz!(Image.width(labels), Image.height(labels))

hist_xy_min = 
  xy
  |> Vix.Vips.Operation.hist_find_indexed!(labels, combine: :VIPS_COMBINE_MIN) 
  |> Vix.Vips.Image.to_list!()
  |> hd()

hist_xy_max = 
  xy
  |> Vix.Vips.Operation.hist_find_indexed!(labels, combine: :VIPS_COMBINE_MAX) 
  |> Vix.Vips.Image.to_list!()
  |> hd()

# Drop the first two bounding boxes since they
# are the origin and the full image. The remaining
# regions are what we want.
bounding_boxes = 
  hist_xy_min
  |> Enum.zip(hist_xy_max) 
  |> Enum.drop(2)
  |> IO.inspect(label: "Region bounding boxes {[x_min, y_min], [x_max, y_max]}")

# Draw the bounding boxes over the original
# image.
{:ok, overlay} = 
  image
  |> Vix.Vips.Operation.copy!()
  |> Image.mutate(fn i ->
    Enum.reduce(bounding_boxes, i, fn {[x_min, y_min], [x_max, y_max]}, acc ->
      x_min = trunc(x_min)
      y_min = trunc(y_min)
      width = trunc(x_max - x_min) + 1
      height = trunc(y_max - y_min) + 1
      Image.Draw.rect!(acc, x_min, y_min, width, height, fill: false, color: :red, stroke_width: 3)
    end)
  end)

Image.Kino.show(overlay)
```

## Identify and remove artifacts

For the purposes of this example lets assume that the subject of the image is the largest region and that all the other regions are artifacts.

```elixir
# Sort the regions by their area, descending in size
# then drop the first one (the largest area)
area = fn {[x_min, y_min], [x_max, y_max]} ->
  width = trunc(x_max - x_min) + 1
  height = trunc(y_max - y_min) + 1
  width * height
end

artifacts =
  bounding_boxes
  |> Enum.sort(fn a, b -> area.(a) > area.(b) end)
  |> Enum.drop(1)

# Get the dominant color on the basis that is
# most likely the right color for a mammogram or
# other medical scan.
background_color = Image.dominant_color!(image)

# For each artifact, create an image of the same
# size as the artifact, that has the color of the
# dominant color, and compose it in the same place
# as the artifact thereby masking it out of the image.
image_bands = Image.bands(image)

masked_image =
  Enum.reduce artifacts, image, fn {[x_min, y_min], [x_max, y_max]}, i ->
    width = trunc(x_max - x_min) + 1
    height = trunc(y_max - y_min) + 1
    {:ok, mask} = Image.new(width, height, color: background_color, bands: image_bands)
    
    Image.compose!(i, mask, x: trunc(x_min), y: trunc(y_min))
  end

Image.Kino.show(masked_image)
```
